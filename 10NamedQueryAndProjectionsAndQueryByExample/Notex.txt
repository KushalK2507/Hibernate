Its best practise to consolidate all the HQL Queries in 1 place.
To do that we can use the below annotation in the entity class whose information we are fetching.

@NamedQuery(name="", query ="") // Here we can give the name of the Query and use session.getNamedQuery("name of the Query")
to fetch the details

@NativeQuery(name="", query="", resultclass="") // In this we can give the native SQL query to fetch the details 
and also given the result class where we give the name of the class as here we are dealing with native Query and 
SQL didn't know which type of object is returned use session.getNativeQuery("name of the Query")
to fetch the details

Now we will consider the Criteria API to fetch the records.
Criteria criteria = session.createCriteria(Users.class); // In this we set the entity class from which we need to 
fetch the data

criteria.add(Restrictions.eq("username", "User2"))
				.add(Restrictions.gt("userId", 5));
				

 // In this we have created the Restriction in which username=User2.
We can apply multiple criteria by adding the Restriction to the criteria
We can also user different restriction as above we have used equal and there are more such Restriction.

eq --> equal
gt --> greater than
like --> like
ge --> greater than equal to
		List<Users> user5 = criteria.list();
		
We can also use "or" in Restriction by default if we just add the Restriction then it will consider it and 
and add the restriction.
Restriction.or(Restriction.between("userID","low","high").Restriction.between("userId","low","high"))

To get the max userId Or maximum we use Projections.
Projection is mainly similiar to using the functions in SQL Query(max, count, sum)
We can also to use projection to single column.


		Criteria projection = session.createCriteria(Users.class)
				.setProjection(Projections.property("userId"));
// In above way we can set the Projections
 				
Projections have many properties which are similiar to the functions in SQL.
Projections.property("userId") --> returns only the column which is mentioned.
Projections.avg("")
sum("")
rowCount("")

We can also sort the records returns
	
		Criteria projection = session.createCriteria(Users.class)
				.setProjection(Projections.property("userId"))
				.addOrder(Order.asc("userId"));
				
Order.asc("") --> to sort in ascending Order
 Order.desc("") --> to sort in Descding Order
 
 
 QueryByExample
 It is handy way if we have too many Projections and criteria.
 
 Users userdetails = new Users();
	userdetails.setUserId(2);
	Example example = Example.create(userdetails);
	Criteria queryByExample = session.createCriteria(Users.class).add(example);
	
 we can set only the properties in User class which we want Hibernate to consider.
 We can also create the example to exclude any property i.e. not to consider that column.
 Example example = Example.create(userdetails).excludeProperty("proeprtyName");.// Her PropertyName
  means the name of the column i.e. the name of the dataType present in the entity class.
 
 We can also enable the like in Query by Example as below
 userdetails.setuserName("User 2%");
	Example example = Example.create(userdetails).enableLike();
	
	This will be trated as like in where clause in Hibernate.
	
 
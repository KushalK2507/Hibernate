In this project we will set Up Hibernate dependency.
Steps
1. Create the new folder of lib.
2. Now go to hibernate.org and go to Hibernate ORM section and doenload the zip file.
3. Copy my SQl Connector jar from MySQL folder in C:/ProgramFiles/MySQL.
4.  Unzip the zipped file of Hibernate and copy the required folder in lib section.
5. Copy all these jar copy the these jar in lib folder of the Project.
6. Now Configure the build path. Going Build Path libraries section and add jar button and add these jars.

XML file is used to configure the properties of Hibernate we need to use.

Various tags in XML file and their significance.

Connection.driver_class --> As we are using MySQL we are setting upp to com.mysql.jdbc.Driver
dialect --> org.hibernate.dialect.MySQLDialect --> MySQLDialect significies that we are using MySQL for DB Connection and
Hibernate Generate the MySQL Queries in background that will be executed.
dialect makes it possible to make Hibernate as Database independent as we can just Change the dialect for other Database.
Connection.url --> url of connecting to DB.
username and password of DB.
by using show_sql --> we have enabled the logging to show the Generated Query by Hibernate on console.
hibernate.hbm2ddl.auto --> This property is used to create OR update the table. Valid values --> create,update, drop. 
Mostly used is update.

Go to the HibernateSession.png and see the difference between SessionFactory and Session.
All the initial basic of Hibernate  like Connection with DB Connection URL, username, password and various other properties 
are Session Factory as it is invoked during the Start Up of the Application.
Session Factory is created with the configuration we have done. It is created on Start Up of the Application as this object 
is one per Application.
Session are lightweight to create the object and close the session as it is not Thread safe.
 
 @Column annotation can be used under Embeddable Object as well. to give the specified column name of the embedded objects.

 By Default Hibernate uses the Lazy Fetch Type.
 As in this project to get the List of Address when we use session.get() at that time
 it does not fetches all the address from user_address table. It fetches the address
 when we do user.getListOfAddress() and at time we need session to open as Hibernate cretes the
 Proxy class through which it again Queries the DB to fetch the list of address.
 If we use user.getListOfaddress after closing the session we would get LazyInitializationException.
 
 To get the List of Objects at the time we use session.get() then we need to made 
 the ListOfAddress as Eager Fetch Type.
 This can be done by marking the listOfAddress with annotation 
 @ElementCollection (fetch=FetchType.EAGER) 
 
 
 